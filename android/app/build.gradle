def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

def buildProp = new Properties()
def buildPropFile = rootProject.file("build.properties")
if (buildPropFile.exists()) {
    buildPropFile.withReader('UTF-8') { reader ->
        buildProp.load(reader)
    }
}

def keystoreProp = new Properties()
def keystorePropFile = rootProject.file("keystore.properties")
if (keystorePropFile.exists()) {
    keystorePropFile.withReader('UTF-8') { reader ->
        keystoreProp.load(reader)
    }
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    compileSdkVersion buildProp["compileSdk"].toInteger()
    ndkVersion flutter.ndkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        applicationId buildProp["applicationId"]
        // You can update the following values to match your application needs.
        // For more information, see: https://docs.flutter.dev/deployment/android#reviewing-the-build-configuration.
        minSdkVersion buildProp["minSdk"].toInteger()
        targetSdkVersion buildProp["targetSdk"].toInteger()
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }

    signingConfigs {
        release {
            def path = keystoreProp["releaseKeyStore"]
            if (path != null) {
                keyAlias keystoreProp["releaseKeyAlias"]
                keyPassword keystoreProp["releaseKeyPassword"]
                storeFile file(rootProject.file(keystoreProp["releaseKeyStore"]))
                storePassword keystoreProp["releaseStorePassword"]
            }
        }
    }

    buildTypes {
        debug {

        }
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.release
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}
